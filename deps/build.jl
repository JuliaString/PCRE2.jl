using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libpcre2-8"], :libpcre2_8),
    LibraryProduct(prefix, String["libpcre2-16"], :libpcre2_16),
    LibraryProduct(prefix, String["libpcre2-32"], :libpcre2_32),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaString/PCRE2Builder/releases/download/v0.1.3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/PCRE2Builder.aarch64-linux-gnu.tar.gz", "46ad38baf0a3e310741c40fa4849f21161c978228ae0263bb36888bb50254793"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/PCRE2Builder.arm-linux-gnueabihf.tar.gz", "1997d02ee9cf659045889c1f97ae2a4307303629af11083b44ee7ec2b036c826"),
    Linux(:i686, :glibc) => ("$bin_prefix/PCRE2Builder.i686-linux-gnu.tar.gz", "8584ea430b863632583237a09529abe762c0c3c2f9954f2c67ca65a6a61e46d6"),
    Windows(:i686) => ("$bin_prefix/PCRE2Builder.i686-w64-mingw32.tar.gz", "308ccd9c6e5b6002395b7992796bdf78971301d46d01a4c1a65d79c3f19374cc"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/PCRE2Builder.powerpc64le-linux-gnu.tar.gz", "898c121f31aaefc7050dd433350e9685ec936109358250e477620d43e737979c"),
    MacOS(:x86_64) => ("$bin_prefix/PCRE2Builder.x86_64-apple-darwin14.tar.gz", "ff05083d6b438cb2f642e21ae1b1c29d47ea78f7c41c93429ef6240eb8099d80"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/PCRE2Builder.x86_64-linux-gnu.tar.gz", "84449db456972b15ac27fe134525da25000f8a554ac95466ddd67e8bb320fc9f"),
    Windows(:x86_64) => ("$bin_prefix/PCRE2Builder.x86_64-w64-mingw32.tar.gz", "a1730b682e0b463f74dc3fa8c30f90d775224349dbe5601096d8d69a5e962655"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
